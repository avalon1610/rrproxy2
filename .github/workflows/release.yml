name: Release Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-musl
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: linux-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          linux-cargo-
    
    - name: Install musl tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Build Linux musl target
      run: cargo build --release --target=x86_64-unknown-linux-musl
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: rrproxy2-linux
        path: target/x86_64-unknown-linux-musl/release/rrproxy2

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          windows-cargo-
    
    - name: Build Windows MSVC target
      run: cargo build --release --target=x86_64-pc-windows-msvc
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: rrproxy2-windows
        path: target/x86_64-pc-windows-msvc/release/rrproxy2.exe

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: rrproxy2-linux
        path: ./linux-build
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: rrproxy2-windows
        path: ./windows-build
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          linux-build/rrproxy2
          windows-build/rrproxy2.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
